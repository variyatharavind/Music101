/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Package101;

import java.sql.*;
import java.awt.Color;
import java.util.logging.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author Aravind
 */
public class PianoFrame extends javax.swing.JFrame {

    int l=0,k=0;
    String N[]={"","C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B"};
    /**
     * Creates new form NewJFrame
     */
    public PianoFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        welcomePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        scaleSelectorPanel = new javax.swing.JPanel();
        keysPanel1 = new javax.swing.JPanel();
        bLabel1 = new javax.swing.JLabel();
        dLabel1 = new javax.swing.JLabel();
        eLabel1 = new javax.swing.JLabel();
        fLabel1 = new javax.swing.JLabel();
        gLabel1 = new javax.swing.JLabel();
        aLabel1 = new javax.swing.JLabel();
        cLabel1 = new javax.swing.JLabel();
        Bb1 = new javax.swing.JLabel();
        Ab1 = new javax.swing.JLabel();
        Gb1 = new javax.swing.JLabel();
        Eb1 = new javax.swing.JLabel();
        Db1 = new javax.swing.JLabel();
        C1 = new javax.swing.JLabel();
        D1 = new javax.swing.JLabel();
        E1 = new javax.swing.JLabel();
        F1 = new javax.swing.JLabel();
        G1 = new javax.swing.JLabel();
        A1 = new javax.swing.JLabel();
        B1 = new javax.swing.JLabel();
        note1CB = new javax.swing.JComboBox<>();
        note2CB = new javax.swing.JComboBox<>();
        showScaleButton = new javax.swing.JButton();
        scaleCB = new javax.swing.JComboBox<>();
        n1 = new javax.swing.JLabel();
        n2 = new javax.swing.JLabel();
        n3 = new javax.swing.JLabel();
        n4 = new javax.swing.JLabel();
        n5 = new javax.swing.JLabel();
        n6 = new javax.swing.JLabel();
        n7 = new javax.swing.JLabel();
        n8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        scaleIdentifierPanel = new javax.swing.JPanel();
        keysPanel2 = new javax.swing.JPanel();
        bLabel2 = new javax.swing.JLabel();
        dLabel2 = new javax.swing.JLabel();
        eLabel2 = new javax.swing.JLabel();
        fLabel2 = new javax.swing.JLabel();
        gLabel2 = new javax.swing.JLabel();
        aLabel2 = new javax.swing.JLabel();
        cLabel2 = new javax.swing.JLabel();
        Bb2 = new javax.swing.JLabel();
        Ab2 = new javax.swing.JLabel();
        Gb2 = new javax.swing.JLabel();
        Eb2 = new javax.swing.JLabel();
        Db2 = new javax.swing.JLabel();
        C2 = new javax.swing.JLabel();
        D2 = new javax.swing.JLabel();
        E2 = new javax.swing.JLabel();
        F2 = new javax.swing.JLabel();
        G2 = new javax.swing.JLabel();
        A2 = new javax.swing.JLabel();
        B2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        searchScaleButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        scaleSelectorPanel1 = new javax.swing.JPanel();
        keysPanel3 = new javax.swing.JPanel();
        bLabel3 = new javax.swing.JLabel();
        dLabel3 = new javax.swing.JLabel();
        eLabel3 = new javax.swing.JLabel();
        fLabel3 = new javax.swing.JLabel();
        gLabel3 = new javax.swing.JLabel();
        aLabel3 = new javax.swing.JLabel();
        cLabel3 = new javax.swing.JLabel();
        Bb3 = new javax.swing.JLabel();
        Ab3 = new javax.swing.JLabel();
        Gb3 = new javax.swing.JLabel();
        Eb3 = new javax.swing.JLabel();
        Db3 = new javax.swing.JLabel();
        C3 = new javax.swing.JLabel();
        D3 = new javax.swing.JLabel();
        E3 = new javax.swing.JLabel();
        F3 = new javax.swing.JLabel();
        G3 = new javax.swing.JLabel();
        A3 = new javax.swing.JLabel();
        B3 = new javax.swing.JLabel();
        note1CB1 = new javax.swing.JComboBox<>();
        note2CB1 = new javax.swing.JComboBox<>();
        chordCB = new javax.swing.JComboBox<>();
        n9 = new javax.swing.JLabel();
        n10 = new javax.swing.JLabel();
        n11 = new javax.swing.JLabel();
        n12 = new javax.swing.JLabel();
        typeCB = new javax.swing.JComboBox<>();
        showChordButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabbedPane1.setBackground(new java.awt.Color(51, 51, 0));
        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane1.setFont(new java.awt.Font("Trebuchet MS", 1, 16)); // NOI18N
        jTabbedPane1.setOpaque(true);

        welcomePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 0, 108)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Piano101");
        welcomePanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 550, 250));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Package101/piano.png"))); // NOI18N
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        welcomePanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 260, 580, 190));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Package101/home.png"))); // NOI18N
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        welcomePanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 0, 30, 30));

        jLabel4.setBackground(new java.awt.Color(153, 255, 153));
        jLabel4.setOpaque(true);
        welcomePanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 580, 450));

        jTabbedPane1.addTab("", welcomePanel);

        scaleSelectorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        scaleSelectorPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        keysPanel1.setBackground(new java.awt.Color(0, 255, 255));
        keysPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        keysPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bLabel1.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        bLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bLabel1.setText("B");
        keysPanel1.add(bLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 190, 40, 40));

        dLabel1.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        dLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dLabel1.setText("D");
        keysPanel1.add(dLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 190, 40, 40));

        eLabel1.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        eLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eLabel1.setText("E");
        keysPanel1.add(eLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 190, 40, 40));

        fLabel1.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        fLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fLabel1.setText("F");
        keysPanel1.add(fLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 190, 40, 40));

        gLabel1.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        gLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gLabel1.setText("G");
        keysPanel1.add(gLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 190, 40, 40));

        aLabel1.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        aLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aLabel1.setText("A");
        keysPanel1.add(aLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 190, 40, 40));

        cLabel1.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        cLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cLabel1.setText("C");
        keysPanel1.add(cLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 40, 40));

        Bb1.setBackground(new java.awt.Color(0, 0, 0));
        Bb1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        Bb1.setOpaque(true);
        keysPanel1.add(Bb1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, 20, 140));

        Ab1.setBackground(new java.awt.Color(0, 0, 0));
        Ab1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        Ab1.setOpaque(true);
        keysPanel1.add(Ab1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 20, 20, 140));

        Gb1.setBackground(new java.awt.Color(0, 0, 0));
        Gb1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        Gb1.setOpaque(true);
        keysPanel1.add(Gb1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 20, 140));

        Eb1.setBackground(new java.awt.Color(0, 0, 0));
        Eb1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        Eb1.setOpaque(true);
        keysPanel1.add(Eb1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 20, 140));

        Db1.setBackground(new java.awt.Color(0, 0, 0));
        Db1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        Db1.setOpaque(true);
        keysPanel1.add(Db1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 20, 140));

        C1.setBackground(new java.awt.Color(255, 255, 255));
        C1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        C1.setOpaque(true);
        keysPanel1.add(C1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 40, 220));

        D1.setBackground(new java.awt.Color(255, 255, 255));
        D1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        D1.setOpaque(true);
        keysPanel1.add(D1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 40, 220));

        E1.setBackground(new java.awt.Color(255, 255, 255));
        E1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        E1.setOpaque(true);
        keysPanel1.add(E1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 40, 220));

        F1.setBackground(new java.awt.Color(255, 255, 255));
        F1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        F1.setOpaque(true);
        keysPanel1.add(F1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 40, 220));

        G1.setBackground(new java.awt.Color(255, 255, 255));
        G1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        G1.setOpaque(true);
        keysPanel1.add(G1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 40, 220));

        A1.setBackground(new java.awt.Color(255, 255, 255));
        A1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        A1.setOpaque(true);
        keysPanel1.add(A1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, 40, 220));

        B1.setBackground(new java.awt.Color(255, 255, 255));
        B1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        B1.setOpaque(true);
        keysPanel1.add(B1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, 40, 220));

        scaleSelectorPanel.add(keysPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 110, 320, 260));

        note1CB.setBackground(new java.awt.Color(0, 255, 255));
        note1CB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<html><i>Select Note", "C", "D", "E", "F", "G", "A", "B" }));
        scaleSelectorPanel.add(note1CB, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 100, -1));

        note2CB.setBackground(new java.awt.Color(0, 255, 255));
        note2CB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "#", "b" }));
        scaleSelectorPanel.add(note2CB, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 30, 40, -1));

        showScaleButton.setBackground(new java.awt.Color(0, 255, 255));
        showScaleButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        showScaleButton.setText("Show Scale");
        showScaleButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        showScaleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showScaleButtonActionPerformed(evt);
            }
        });
        scaleSelectorPanel.add(showScaleButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 70, 120, 30));

        scaleCB.setBackground(new java.awt.Color(0, 255, 255));
        scaleCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<html><i>Select Scale", "major", "minor" }));
        scaleSelectorPanel.add(scaleCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 30, 110, -1));

        n1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        n1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        n1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        scaleSelectorPanel.add(n1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 40, 40));

        n2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        n2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        n2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        scaleSelectorPanel.add(n2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 390, 40, 40));

        n3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        n3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        n3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        scaleSelectorPanel.add(n3, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 390, 40, 40));

        n4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        n4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        n4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        scaleSelectorPanel.add(n4, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 390, 40, 40));

        n5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        n5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        n5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        scaleSelectorPanel.add(n5, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 390, 40, 40));

        n6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        n6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        n6.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        scaleSelectorPanel.add(n6, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 390, 40, 40));

        n7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        n7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        n7.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        scaleSelectorPanel.add(n7, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 390, 40, 40));

        n8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        n8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        n8.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        scaleSelectorPanel.add(n8, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 390, 40, 40));

        jLabel5.setBackground(new java.awt.Color(153, 255, 153));
        jLabel5.setOpaque(true);
        scaleSelectorPanel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 580, 450));

        jTabbedPane1.addTab("Scale Selector", scaleSelectorPanel);

        scaleIdentifierPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        scaleIdentifierPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        keysPanel2.setBackground(new java.awt.Color(0, 255, 255));
        keysPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        keysPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bLabel2.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        bLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bLabel2.setText("B");
        keysPanel2.add(bLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 190, 40, 40));

        dLabel2.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        dLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dLabel2.setText("D");
        keysPanel2.add(dLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 190, 40, 40));

        eLabel2.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        eLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eLabel2.setText("E");
        keysPanel2.add(eLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 190, 40, 40));

        fLabel2.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        fLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fLabel2.setText("F");
        keysPanel2.add(fLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 190, 40, 40));

        gLabel2.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        gLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gLabel2.setText("G");
        keysPanel2.add(gLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 190, 40, 40));

        aLabel2.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        aLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aLabel2.setText("A");
        keysPanel2.add(aLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 190, 40, 40));

        cLabel2.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        cLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cLabel2.setText("C");
        keysPanel2.add(cLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 40, 40));

        Bb2.setBackground(new java.awt.Color(0, 0, 0));
        Bb2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        Bb2.setOpaque(true);
        Bb2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Bb2MouseClicked(evt);
            }
        });
        keysPanel2.add(Bb2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, 20, 140));

        Ab2.setBackground(new java.awt.Color(0, 0, 0));
        Ab2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        Ab2.setOpaque(true);
        Ab2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Ab2MouseClicked(evt);
            }
        });
        keysPanel2.add(Ab2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 20, 20, 140));

        Gb2.setBackground(new java.awt.Color(0, 0, 0));
        Gb2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        Gb2.setOpaque(true);
        Gb2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Gb2MouseClicked(evt);
            }
        });
        keysPanel2.add(Gb2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 20, 140));

        Eb2.setBackground(new java.awt.Color(0, 0, 0));
        Eb2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        Eb2.setOpaque(true);
        Eb2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Eb2MouseClicked(evt);
            }
        });
        keysPanel2.add(Eb2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 20, 140));

        Db2.setBackground(new java.awt.Color(0, 0, 0));
        Db2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        Db2.setOpaque(true);
        Db2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Db2MouseClicked(evt);
            }
        });
        keysPanel2.add(Db2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 20, 140));

        C2.setBackground(new java.awt.Color(255, 255, 255));
        C2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        C2.setOpaque(true);
        C2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                C2MouseClicked(evt);
            }
        });
        keysPanel2.add(C2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 40, 220));

        D2.setBackground(new java.awt.Color(255, 255, 255));
        D2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        D2.setOpaque(true);
        D2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                D2MouseClicked(evt);
            }
        });
        keysPanel2.add(D2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 40, 220));

        E2.setBackground(new java.awt.Color(255, 255, 255));
        E2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        E2.setOpaque(true);
        E2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                E2MouseClicked(evt);
            }
        });
        keysPanel2.add(E2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 40, 220));

        F2.setBackground(new java.awt.Color(255, 255, 255));
        F2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        F2.setOpaque(true);
        F2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                F2MouseClicked(evt);
            }
        });
        keysPanel2.add(F2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 40, 220));

        G2.setBackground(new java.awt.Color(255, 255, 255));
        G2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        G2.setOpaque(true);
        G2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                G2MouseClicked(evt);
            }
        });
        keysPanel2.add(G2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 40, 220));

        A2.setBackground(new java.awt.Color(255, 255, 255));
        A2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        A2.setOpaque(true);
        A2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                A2MouseClicked(evt);
            }
        });
        keysPanel2.add(A2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, 40, 220));

        B2.setBackground(new java.awt.Color(255, 255, 255));
        B2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        B2.setOpaque(true);
        B2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B2MouseClicked(evt);
            }
        });
        keysPanel2.add(B2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, 40, 220));

        scaleIdentifierPanel.add(keysPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 320, 260));

        jTable1.setBackground(new java.awt.Color(0, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Scale", "1", "2", "3", "4", "5", "6", "7", "8"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setAutoscrolls(false);
        jScrollPane1.setViewportView(jTable1);

        scaleIdentifierPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 560, 90));

        searchScaleButton.setBackground(new java.awt.Color(0, 255, 255));
        searchScaleButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        searchScaleButton.setText("Search Scale");
        searchScaleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchScaleButtonActionPerformed(evt);
            }
        });
        scaleIdentifierPanel.add(searchScaleButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 300, -1, 30));

        resetButton.setBackground(new java.awt.Color(0, 255, 255));
        resetButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        scaleIdentifierPanel.add(resetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 300, -1, 30));

        jLabel6.setBackground(new java.awt.Color(153, 255, 153));
        jLabel6.setOpaque(true);
        scaleIdentifierPanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 580, 450));

        jTabbedPane1.addTab("Scale Identifier", scaleIdentifierPanel);

        scaleSelectorPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        scaleSelectorPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        keysPanel3.setBackground(new java.awt.Color(0, 255, 255));
        keysPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        keysPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bLabel3.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        bLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bLabel3.setText("B");
        keysPanel3.add(bLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 190, 40, 40));

        dLabel3.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        dLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dLabel3.setText("D");
        keysPanel3.add(dLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 190, 40, 40));

        eLabel3.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        eLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eLabel3.setText("E");
        keysPanel3.add(eLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 190, 40, 40));

        fLabel3.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        fLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fLabel3.setText("F");
        keysPanel3.add(fLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 190, 40, 40));

        gLabel3.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        gLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gLabel3.setText("G");
        keysPanel3.add(gLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 190, 40, 40));

        aLabel3.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        aLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aLabel3.setText("A");
        keysPanel3.add(aLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 190, 40, 40));

        cLabel3.setFont(new java.awt.Font("Sitka Subheading", 1, 18)); // NOI18N
        cLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cLabel3.setText("C");
        keysPanel3.add(cLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 40, 40));

        Bb3.setBackground(new java.awt.Color(0, 0, 0));
        Bb3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        Bb3.setOpaque(true);
        keysPanel3.add(Bb3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, 20, 140));

        Ab3.setBackground(new java.awt.Color(0, 0, 0));
        Ab3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        Ab3.setOpaque(true);
        keysPanel3.add(Ab3, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 20, 20, 140));

        Gb3.setBackground(new java.awt.Color(0, 0, 0));
        Gb3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        Gb3.setOpaque(true);
        keysPanel3.add(Gb3, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 20, 140));

        Eb3.setBackground(new java.awt.Color(0, 0, 0));
        Eb3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        Eb3.setOpaque(true);
        keysPanel3.add(Eb3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 20, 140));

        Db3.setBackground(new java.awt.Color(0, 0, 0));
        Db3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)));
        Db3.setOpaque(true);
        keysPanel3.add(Db3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 20, 140));

        C3.setBackground(new java.awt.Color(255, 255, 255));
        C3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        C3.setOpaque(true);
        keysPanel3.add(C3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 40, 220));

        D3.setBackground(new java.awt.Color(255, 255, 255));
        D3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        D3.setOpaque(true);
        keysPanel3.add(D3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 40, 220));

        E3.setBackground(new java.awt.Color(255, 255, 255));
        E3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        E3.setOpaque(true);
        keysPanel3.add(E3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 40, 220));

        F3.setBackground(new java.awt.Color(255, 255, 255));
        F3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        F3.setOpaque(true);
        keysPanel3.add(F3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 40, 220));

        G3.setBackground(new java.awt.Color(255, 255, 255));
        G3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        G3.setOpaque(true);
        keysPanel3.add(G3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 40, 220));

        A3.setBackground(new java.awt.Color(255, 255, 255));
        A3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        A3.setOpaque(true);
        keysPanel3.add(A3, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, 40, 220));

        B3.setBackground(new java.awt.Color(255, 255, 255));
        B3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.lightGray));
        B3.setOpaque(true);
        keysPanel3.add(B3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, 40, 220));

        scaleSelectorPanel1.add(keysPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, 320, 260));

        note1CB1.setBackground(new java.awt.Color(0, 255, 255));
        note1CB1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<html><i>Select Note", "C", "D", "E", "F", "G", "A", "B" }));
        scaleSelectorPanel1.add(note1CB1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, 100, -1));

        note2CB1.setBackground(new java.awt.Color(0, 255, 255));
        note2CB1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "# ", "b " }));
        scaleSelectorPanel1.add(note2CB1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 30, 50, -1));

        chordCB.setBackground(new java.awt.Color(0, 255, 255));
        chordCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<html><i>Select Chord" }));
        scaleSelectorPanel1.add(chordCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 30, 110, -1));

        n9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        n9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        n9.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        scaleSelectorPanel1.add(n9, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 390, 40, 40));

        n10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        n10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        n10.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        scaleSelectorPanel1.add(n10, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 390, 40, 40));

        n11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        n11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        n11.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        scaleSelectorPanel1.add(n11, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 390, 40, 40));

        n12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        n12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        n12.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        scaleSelectorPanel1.add(n12, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 390, 40, 40));

        typeCB.setBackground(new java.awt.Color(0, 255, 255));
        typeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<html><i>Select Type", "Triad", "Seventh" }));
        typeCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                typeCBItemStateChanged(evt);
            }
        });
        scaleSelectorPanel1.add(typeCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 30, -1, -1));

        showChordButton.setBackground(new java.awt.Color(0, 255, 255));
        showChordButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        showChordButton.setText("Show Chord");
        showChordButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        showChordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showChordButtonActionPerformed(evt);
            }
        });
        scaleSelectorPanel1.add(showChordButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 70, 130, 30));

        jLabel7.setBackground(new java.awt.Color(153, 255, 153));
        jLabel7.setOpaque(true);
        scaleSelectorPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 580, 450));

        jTabbedPane1.addTab("Chord Selector", scaleSelectorPanel1);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 720, 460));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showScaleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showScaleButtonActionPerformed
        setKeysDefault();
        String s1=note1CB.getSelectedItem().toString();
        String s2=note2CB.getSelectedItem().toString().trim();
        String s3=scaleCB.getSelectedItem().toString();
        String s=s1+s2+" "+s3;
        String notes[]=getNotes(s);
        n1.setText(notes[0]);
        n2.setText(notes[1]);
        n3.setText(notes[2]);
        n4.setText(notes[3]);
        n5.setText(notes[4]);
        n6.setText(notes[5]);
        n7.setText(notes[6]);
        n8.setText(notes[7]);
        for(int i=0;i<8;i++){
            noteSelectScale(noteNumber(notes[i]));
        }
    }//GEN-LAST:event_showScaleButtonActionPerformed

    private void C2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_C2MouseClicked
        if(C2.getBackground()==Color.white){
            C2.setBackground(Color.yellow);
        }
        else{
            C2.setBackground(Color.white);           
        }            
    }//GEN-LAST:event_C2MouseClicked

    private void D2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_D2MouseClicked
        if(D2.getBackground()==Color.white){
            D2.setBackground(Color.yellow);
        }
        else{
            D2.setBackground(Color.white);            
        } 
    }//GEN-LAST:event_D2MouseClicked

    private void E2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_E2MouseClicked
        if(E2.getBackground()==Color.white){
            E2.setBackground(Color.yellow);
        }
        else{
            E2.setBackground(Color.white);            
        } 
    }//GEN-LAST:event_E2MouseClicked

    private void F2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_F2MouseClicked
        if(F2.getBackground()==Color.white){
            F2.setBackground(Color.yellow);
        }
        else{
            F2.setBackground(Color.white);            
        } 
    }//GEN-LAST:event_F2MouseClicked

    private void G2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_G2MouseClicked
        if(G2.getBackground()==Color.white){
            G2.setBackground(Color.yellow);
        }
        else{
            G2.setBackground(Color.white);           
        } 
    }//GEN-LAST:event_G2MouseClicked

    private void A2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_A2MouseClicked
        if(A2.getBackground()==Color.white){
            A2.setBackground(Color.yellow);
        }
        else{
            A2.setBackground(Color.white);            
        } 
    }//GEN-LAST:event_A2MouseClicked

    private void B2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B2MouseClicked
        if(B2.getBackground()==Color.white){
            B2.setBackground(Color.yellow);
        }
        else{
            B2.setBackground(Color.white);           
        } 
    }//GEN-LAST:event_B2MouseClicked

    private void Db2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Db2MouseClicked
        if(Db2.getBackground()==Color.black){
            Db2.setBackground(Color.blue);
        }
        else{
            Db2.setBackground(Color.black);           
        } 
    }//GEN-LAST:event_Db2MouseClicked

    private void Eb2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Eb2MouseClicked
        if(Eb2.getBackground()==Color.black){
            Eb2.setBackground(Color.blue);            
        }
        else{
            Eb2.setBackground(Color.black);           
        } 
    }//GEN-LAST:event_Eb2MouseClicked

    private void Gb2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Gb2MouseClicked
        if(Gb2.getBackground()==Color.black){
            Gb2.setBackground(Color.blue);
        }
        else{
            Gb2.setBackground(Color.black);           
        } 
    }//GEN-LAST:event_Gb2MouseClicked

    private void Ab2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Ab2MouseClicked
        if(Ab2.getBackground()==Color.black){
            Ab2.setBackground(Color.blue);
        }
        else{
            Ab2.setBackground(Color.black);           
        } 
    }//GEN-LAST:event_Ab2MouseClicked

    private void Bb2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Bb2MouseClicked
        if(Bb2.getBackground()==Color.black){
            Bb2.setBackground(Color.blue);
        }
        else{
            Bb2.setBackground(Color.black);           
        } 
    }//GEN-LAST:event_Bb2MouseClicked

    private void searchScaleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchScaleButtonActionPerformed
        getSelectedNotesNum();
        if(l>7){
            setKeysDefault();
            l=0;
            JOptionPane.showMessageDialog(this,"Please select 7 or lesser notes");

        } 
        if(l!=0){
           int numScale[]=getSearchScale();
           String ScaleName[]=identifySearchScale(numScale);
           showSearchScale(ScaleName);
           l=0; 
        }      
    }//GEN-LAST:event_searchScaleButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        setKeysDefault();
        DefaultTableModel scaleTM=(DefaultTableModel)jTable1.getModel();
        for(int i=0;i<scaleTM.getRowCount();){
            scaleTM.removeRow(i);
        }
        jTable1.setModel(scaleTM);
    }//GEN-LAST:event_resetButtonActionPerformed

    private void typeCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_typeCBItemStateChanged
        DefaultComboBoxModel chCB=(DefaultComboBoxModel)chordCB.getModel();
        chCB.removeAllElements();
        if(typeCB.getSelectedItem()=="Triad"){            
            chCB.addElement("M");
            chCB.addElement("m");
            chCB.addElement("aug");
            chCB.addElement("dim");
        }
        else if(typeCB.getSelectedItem()=="Seventh"){
            chCB.addElement("dim7"); 
            chCB.addElement("m7b5");
            chCB.addElement("m7");
            chCB.addElement("mM7");
            chCB.addElement("7");
            chCB.addElement("M7");
            chCB.addElement("aug7");
            chCB.addElement("M7#5");
        }
    }//GEN-LAST:event_typeCBItemStateChanged

    private void showChordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showChordButtonActionPerformed
        setKeysDefault();
        String s=note1CB1.getSelectedItem().toString()+note2CB1.getSelectedItem().toString();
        int notes[]=new int[4];
        try{
            Connection con=DriverManager.getConnection("jdbc:mysql://localhost/Music101DB","root","aravind123");
            Statement st=con.createStatement();
            ResultSet rs=null;
            if(chordCB.getSelectedItem()=="M"){
                //C E G
                //1 3 5
                //major
                String query="SELECT * from scalesNum where ChordName=\""+s+"major\";";
                rs=st.executeQuery(query);
                while(rs.next()){
                    notes[0]=rs.getInt("One");
                    notes[1]=rs.getInt("Three");
                    notes[2]=rs.getInt("Five");
                }
            }
            else if(chordCB.getSelectedItem()=="m"){
                //C Eb G
                //1 3 5
                //minor
                String query="SELECT * from scalesNum where ChordName=\""+s+"minor\";";
                rs=st.executeQuery(query);
                while(rs.next()){
                    notes[0]=rs.getInt("One");
                    notes[1]=rs.getInt("Three");
                    notes[2]=rs.getInt("Five");
                }
            }
            else if(chordCB.getSelectedItem()=="aug"){
                //C E G#
                //1 3 5#
                //major
                String query="SELECT * from scalesNum where ChordName=\""+s+"major\";";
                rs=st.executeQuery(query);
                while(rs.next()){
                    notes[0]=rs.getInt("One");
                    notes[1]=rs.getInt("Three");
                    notes[2]=rs.getInt("Five")+1;
                }
            }
            else if(chordCB.getSelectedItem()=="dim"){
                //C Eb Gb
                //1 3 5b
                //minor
                String query="SELECT * from scalesNum where ChordName=\""+s+"minor\";";
                rs=st.executeQuery(query);
                while(rs.next()){
                    notes[0]=rs.getInt("One");
                    notes[1]=rs.getInt("Three");
                    notes[2]=rs.getInt("Five")-1;
                }
            }
            else if(chordCB.getSelectedItem()=="dim7"){
                //C Eb Gb A
                //1 3 5b 6#
                //minor
                String query="SELECT * from scalesNum where ChordName=\""+s+"minor\";";
                rs=st.executeQuery(query);
                while(rs.next()){
                    notes[0]=rs.getInt("One");
                    notes[1]=rs.getInt("Three");
                    notes[2]=rs.getInt("Five")-1;
                    notes[3]=rs.getInt("Six")+1;
                }
            }
            else if(chordCB.getSelectedItem()=="m7b5"){
                //C Eb Gb Bb
                //1 3 5b 7
                //minor
                String query="SELECT * from scalesNum where ChordName=\""+s+"minor\";";
                rs=st.executeQuery(query);
                while(rs.next()){
                    notes[0]=rs.getInt("One");
                    notes[1]=rs.getInt("Three");
                    notes[2]=rs.getInt("Five")-1;
                    notes[3]=rs.getInt("Seven");
                }
            }
            else if(chordCB.getSelectedItem()=="m7"){
                //C Eb G Bb
                //1 3 5 7
                //minor
                String query="SELECT * from scalesNum where ChordName=\""+s+"minor\";";
                rs=st.executeQuery(query);
                while(rs.next()){
                    notes[0]=rs.getInt("One");
                    notes[1]=rs.getInt("Three");
                    notes[2]=rs.getInt("Five");
                    notes[3]=rs.getInt("Seven");
                }
            }
            else if(chordCB.getSelectedItem()=="mM7"){
                //C Eb G B
                //1 3 5 7#
                //minor
                String query="SELECT * from scalesNum where ChordName=\""+s+"minor\";";
                rs=st.executeQuery(query);
                while(rs.next()){
                    notes[0]=rs.getInt("One");
                    notes[1]=rs.getInt("Three");
                    notes[2]=rs.getInt("Five");
                    notes[3]=rs.getInt("Seven")+1;
                }
            }
            else if(chordCB.getSelectedItem()=="7"){
                //C E G Bb
                //1 3 5 7b
                //major
                String query="SELECT * from scalesNum where ChordName=\""+s+"major\";";
                rs=st.executeQuery(query);
                while(rs.next()){
                    notes[0]=rs.getInt("One");
                    notes[1]=rs.getInt("Three");
                    notes[2]=rs.getInt("Five");
                    notes[3]=rs.getInt("Seven")-1;
                }
            }
            else if(chordCB.getSelectedItem()=="M7"){
                //C E G B
                //1 3 5 7
                //major
                String query="SELECT * from scalesNum where ChordName=\""+s+"major\";";
                rs=st.executeQuery(query);
                while(rs.next()){
                    notes[0]=rs.getInt("One");
                    notes[1]=rs.getInt("Three");
                    notes[2]=rs.getInt("Five");
                    notes[3]=rs.getInt("Seven");
                }
            }
            else if(chordCB.getSelectedItem()=="aug7"){
                //C E G# Bb
                //1 3 5# 7b
                //major
                String query="SELECT * from scalesNum where ChordName=\""+s+"major\";";
                rs=st.executeQuery(query);
                while(rs.next()){
                    notes[0]=rs.getInt("One");
                    notes[1]=rs.getInt("Three");
                    notes[2]=rs.getInt("Five")+1;
                    notes[3]=rs.getInt("Seven")-1;
                }
            }
            else if(chordCB.getSelectedItem()=="M7#5"){
                //C E G# B
                //1 3 5# 7
                //major
                String query="SELECT * from scalesNum where ChordName=\""+s+"major\";";
                rs=st.executeQuery(query);
                while(rs.next()){
                    notes[0]=rs.getInt("One");
                    notes[1]=rs.getInt("Three");
                    notes[2]=rs.getInt("Five")+1;
                    notes[3]=rs.getInt("Seven");
                }
            }
            rs.close();
            st.close();
            con.close();
            for(int i=0;i<4;i++){
                if(notes[i]==0){
                    break;
                }
                noteSelectChord(notes[i]);
            }
            n9.setText(N[notes[0]]+"");
            n10.setText(N[notes[1]]+"");
            n11.setText(N[notes[2]]+"");
            if(notes[3]!=0){   
                n12.setVisible(true);
                n12.setText(N[notes[3]]+"");
            }
            else
                n12.setVisible(false);
            } catch (SQLException ex) {
                Logger.getLogger(PianoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_showChordButtonActionPerformed

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
        this.setVisible(false);
        new StartFrame().setVisible(true);
    }//GEN-LAST:event_jLabel3MouseClicked

    public String[] getNotes(String s){
        String notes[]=new String[8];
        try{
            Connection con=DriverManager.getConnection("jdbc:mysql://localhost/Music101DB","root","aravind123");
            Statement st=con.createStatement();
            String query="SELECT * from scales where ChordName=\""+s+"\";";
            ResultSet rs=st.executeQuery(query);
            while(rs.next()){
                notes[0]=rs.getString("One");
                notes[1]=rs.getString("Two");
                notes[2]=rs.getString("Three");
                notes[3]=rs.getString("Four");
                notes[4]=rs.getString("Five");
                notes[5]=rs.getString("Six");
                notes[6]=rs.getString("Seven");
                notes[7]=rs.getString("Eight");
            } 
            rs.close();
            st.close();
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(PianoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return notes;
    }
    
    public int noteNumber(String s){
        char c1=s.charAt(0);
        int noteNumber=0;
        switch(c1){
            case 'C':
                noteNumber=1;
                break;
            case 'D':
                noteNumber=3;
                break;
            case 'E':
                noteNumber=5;
                break;
            case 'F':
                noteNumber=6;
                break; 
            case 'G':
                noteNumber=8;
                break;
            case 'A':
                noteNumber=10;
                break;
            case 'B':
                noteNumber=12;
                break;    
        }
        if(s.length()>1){
            char c2=s.charAt(1);
            switch(c2){
                case '#':
                    noteNumber++;
                    break;
                case 'b':
                    noteNumber--;
                    break;
            }
        }
        return noteNumber;
    }
    
    public void noteSelectScale(int s){
        switch(s){
            case 1:
                C1.setBackground(Color.yellow);
                break;
            case 2:
                Db1.setBackground(Color.blue);
                break;
            case 3:
                D1.setBackground(Color.yellow);
                break;
            case 4:
                Eb1.setBackground(Color.blue);
                break;
            case 5:
                E1.setBackground(Color.yellow);
                break;
            case 6:
                F1.setBackground(Color.yellow);
                break;
            case 7:
                Gb1.setBackground(Color.blue);
                break;
            case 8:
                G1.setBackground(Color.yellow);
                break;
            case 9:
                Ab1.setBackground(Color.blue);
                break;
            case 10:
                A1.setBackground(Color.yellow);
                break;
            case 11:
                Bb1.setBackground(Color.blue);
                break;
            case 12:
                B1.setBackground(Color.yellow);
                break;
            case 0:
                B1.setBackground(Color.yellow);
                break;
        }
    }
    
    public void setKeysDefault(){
        C1.setBackground(Color.white);
        D1.setBackground(Color.white);
        E1.setBackground(Color.white);
        F1.setBackground(Color.white);
        G1.setBackground(Color.white);
        A1.setBackground(Color.white);
        B1.setBackground(Color.white);
        Db1.setBackground(Color.black);
        Eb1.setBackground(Color.black);
        Gb1.setBackground(Color.black);
        Ab1.setBackground(Color.black);
        Bb1.setBackground(Color.black);
        C2.setBackground(Color.white);
        D2.setBackground(Color.white);
        E2.setBackground(Color.white);
        F2.setBackground(Color.white);
        G2.setBackground(Color.white);
        A2.setBackground(Color.white);
        B2.setBackground(Color.white);
        Db2.setBackground(Color.black);
        Eb2.setBackground(Color.black);
        Gb2.setBackground(Color.black);
        Ab2.setBackground(Color.black);
        Bb2.setBackground(Color.black);
        C3.setBackground(Color.white);
        D3.setBackground(Color.white);
        E3.setBackground(Color.white);
        F3.setBackground(Color.white);
        G3.setBackground(Color.white);
        A3.setBackground(Color.white);
        B3.setBackground(Color.white);
        Db3.setBackground(Color.black);
        Eb3.setBackground(Color.black);
        Gb3.setBackground(Color.black);
        Ab3.setBackground(Color.black);
        Bb3.setBackground(Color.black);
    }
    
    public void getSelectedNotesNum(){
        if(C2.getBackground()==Color.yellow)
            l++; 
        if(D2.getBackground()==Color.yellow)
            l++; 
        if(E2.getBackground()==Color.yellow)
            l++; 
        if(F2.getBackground()==Color.yellow)
            l++; 
        if(G2.getBackground()==Color.yellow)
            l++; 
        if(A2.getBackground()==Color.yellow)
            l++; 
        if(B2.getBackground()==Color.yellow)
            l++; 
        if(Db2.getBackground()==Color.blue)
            l++; 
        if(Eb2.getBackground()==Color.blue)
            l++; 
        if(Gb2.getBackground()==Color.blue)
            l++; 
        if(Ab2.getBackground()==Color.blue)
            l++; 
        if(Bb2.getBackground()==Color.blue)
            l++;               
    }
    
    public int[] getSearchScale(){
        int search[]=new int[12];
        int i=0;
        if(C2.getBackground()==Color.yellow){
            search[i]=1;
            i++;
        }
        if(D2.getBackground()==Color.yellow){
            search[i]=3;
            i++;
        }
        if(E2.getBackground()==Color.yellow){
            search[i]=5;
            i++;
        }
        if(F2.getBackground()==Color.yellow){
            search[i]=6;
            i++;
        }
        if(G2.getBackground()==Color.yellow){
            search[i]=8;
            i++;
        }
        if(A2.getBackground()==Color.yellow){
            search[i]=10;
            i++;
        }
        if(B2.getBackground()==Color.yellow){
            search[i]=12;
            i++;
        }
        if(Db2.getBackground()==Color.blue){
            search[i]=2;
            i++;
        }
        if(Eb2.getBackground()==Color.blue){
            search[i]=4;
            i++;
        }
        if(Gb2.getBackground()==Color.blue){
            search[i]=7;
            i++;
        }
        if(Ab2.getBackground()==Color.blue){
            search[i]=9;
            i++;
        }
        if(Bb2.getBackground()==Color.blue){
            search[i]=11;
            i++;
        }
        return search;
    }
    
    public String[] identifySearchScale(int numScale[]){
        int notes[]=new int[7];   
        String ScaleName[]=new String[50];
        try {           
            Connection con=DriverManager.getConnection("jdbc:mysql://localhost/Music101DB","root","aravind123");
            Statement st=con.createStatement();
            String query="SELECT * from scalesNum;";
            ResultSet rs=st.executeQuery(query);
            while(rs.next()){
                notes[0]=rs.getInt("One");
                notes[1]=rs.getInt("Two");
                notes[2]=rs.getInt("Three");
                notes[3]=rs.getInt("Four");
                notes[4]=rs.getInt("Five");
                notes[5]=rs.getInt("Six");
                notes[6]=rs.getInt("Seven");
                int match=0;
                for(int i=0;i<7;i++){                    
                    for(int j=0;j<7;j++){
                        if(notes[j]==numScale[i]){
                            match++;
                        }
                    }                   
                }
                if(match==l){
                    ScaleName[k]=rs.getString("ChordName");
                    k++;
                }
            } 
            rs.close();
            st.close();
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(PianoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ScaleName;       
    }
    
    public void showSearchScale(String sn[]){
        DefaultTableModel scaleTM=(DefaultTableModel)jTable1.getModel();
        for(int i=0;i<k;i++){
            String notes[]=new String[9];   
            try {           
                Connection con=DriverManager.getConnection("jdbc:mysql://localhost/Music101DB","root","aravind123");
                Statement st=con.createStatement();
                String query="SELECT * from scales where ChordName=\""+sn[i]+"\";";
                ResultSet rs=st.executeQuery(query);
                while(rs.next()){
                    notes[0]=rs.getString("ChordName");
                    notes[1]=rs.getString("One");
                    notes[2]=rs.getString("Two");
                    notes[3]=rs.getString("Three");
                    notes[4]=rs.getString("Four");
                    notes[5]=rs.getString("Five");
                    notes[6]=rs.getString("Six");
                    notes[7]=rs.getString("Seven");
                    notes[8]=rs.getString("Eight");
                    scaleTM.addRow(notes);
                } 
                rs.close();
                st.close();
                con.close();
            } catch (SQLException ex) {
                Logger.getLogger(PianoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        k=0;
    }
    
    public void noteSelectChord(int s){
        switch(s){
            case 1:
                C3.setBackground(Color.yellow);
                break;
            case 2:
                Db3.setBackground(Color.blue);
                break;
            case 3:
                D3.setBackground(Color.yellow);
                break;
            case 4:
                Eb3.setBackground(Color.blue);
                break;
            case 5:
                E3.setBackground(Color.yellow);
                break;
            case 6:
                F3.setBackground(Color.yellow);
                break;
            case 7:
                Gb3.setBackground(Color.blue);
                break;
            case 8:
                G3.setBackground(Color.yellow);
                break;
            case 9:
                Ab3.setBackground(Color.blue);
                break;
            case 10:
                A3.setBackground(Color.yellow);
                break;
            case 11:
                Bb3.setBackground(Color.blue);
                break;
            case 12:
                B3.setBackground(Color.yellow);
                break;
            case 0:
                B3.setBackground(Color.yellow);
                break;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PianoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PianoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PianoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PianoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PianoFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel A1;
    private javax.swing.JLabel A2;
    private javax.swing.JLabel A3;
    private javax.swing.JLabel Ab1;
    private javax.swing.JLabel Ab2;
    private javax.swing.JLabel Ab3;
    private javax.swing.JLabel B1;
    private javax.swing.JLabel B2;
    private javax.swing.JLabel B3;
    private javax.swing.JLabel Bb1;
    private javax.swing.JLabel Bb2;
    private javax.swing.JLabel Bb3;
    private javax.swing.JLabel C1;
    private javax.swing.JLabel C2;
    private javax.swing.JLabel C3;
    private javax.swing.JLabel D1;
    private javax.swing.JLabel D2;
    private javax.swing.JLabel D3;
    private javax.swing.JLabel Db1;
    private javax.swing.JLabel Db2;
    private javax.swing.JLabel Db3;
    private javax.swing.JLabel E1;
    private javax.swing.JLabel E2;
    private javax.swing.JLabel E3;
    private javax.swing.JLabel Eb1;
    private javax.swing.JLabel Eb2;
    private javax.swing.JLabel Eb3;
    private javax.swing.JLabel F1;
    private javax.swing.JLabel F2;
    private javax.swing.JLabel F3;
    private javax.swing.JLabel G1;
    private javax.swing.JLabel G2;
    private javax.swing.JLabel G3;
    private javax.swing.JLabel Gb1;
    private javax.swing.JLabel Gb2;
    private javax.swing.JLabel Gb3;
    private javax.swing.JLabel aLabel1;
    private javax.swing.JLabel aLabel2;
    private javax.swing.JLabel aLabel3;
    private javax.swing.JLabel bLabel1;
    private javax.swing.JLabel bLabel2;
    private javax.swing.JLabel bLabel3;
    private javax.swing.JLabel cLabel1;
    private javax.swing.JLabel cLabel2;
    private javax.swing.JLabel cLabel3;
    private javax.swing.JComboBox<String> chordCB;
    private javax.swing.JLabel dLabel1;
    private javax.swing.JLabel dLabel2;
    private javax.swing.JLabel dLabel3;
    private javax.swing.JLabel eLabel1;
    private javax.swing.JLabel eLabel2;
    private javax.swing.JLabel eLabel3;
    private javax.swing.JLabel fLabel1;
    private javax.swing.JLabel fLabel2;
    private javax.swing.JLabel fLabel3;
    private javax.swing.JLabel gLabel1;
    private javax.swing.JLabel gLabel2;
    private javax.swing.JLabel gLabel3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel keysPanel1;
    private javax.swing.JPanel keysPanel2;
    private javax.swing.JPanel keysPanel3;
    private javax.swing.JLabel n1;
    private javax.swing.JLabel n10;
    private javax.swing.JLabel n11;
    private javax.swing.JLabel n12;
    private javax.swing.JLabel n2;
    private javax.swing.JLabel n3;
    private javax.swing.JLabel n4;
    private javax.swing.JLabel n5;
    private javax.swing.JLabel n6;
    private javax.swing.JLabel n7;
    private javax.swing.JLabel n8;
    private javax.swing.JLabel n9;
    private javax.swing.JComboBox<String> note1CB;
    private javax.swing.JComboBox<String> note1CB1;
    private javax.swing.JComboBox<String> note2CB;
    private javax.swing.JComboBox<String> note2CB1;
    private javax.swing.JButton resetButton;
    private javax.swing.JComboBox<String> scaleCB;
    private javax.swing.JPanel scaleIdentifierPanel;
    private javax.swing.JPanel scaleSelectorPanel;
    private javax.swing.JPanel scaleSelectorPanel1;
    private javax.swing.JButton searchScaleButton;
    private javax.swing.JButton showChordButton;
    private javax.swing.JButton showScaleButton;
    private javax.swing.JComboBox<String> typeCB;
    private javax.swing.JPanel welcomePanel;
    // End of variables declaration//GEN-END:variables
}
